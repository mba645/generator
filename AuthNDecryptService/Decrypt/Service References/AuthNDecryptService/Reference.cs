//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Decrypt.AuthNDecryptService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/AuthNDecryptService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isValidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tokenAppField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tokenUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isValid {
            get {
                return this.isValidField;
            }
            set {
                if ((this.isValidField.Equals(value) != true)) {
                    this.isValidField = value;
                    this.RaisePropertyChanged("isValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tokenApp {
            get {
                return this.tokenAppField;
            }
            set {
                if ((object.ReferenceEquals(this.tokenAppField, value) != true)) {
                    this.tokenAppField = value;
                    this.RaisePropertyChanged("tokenApp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tokenUser {
            get {
                return this.tokenUserField;
            }
            set {
                if ((object.ReferenceEquals(this.tokenUserField, value) != true)) {
                    this.tokenUserField = value;
                    this.RaisePropertyChanged("tokenUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField.Equals(value) != true)) {
                    this.userIdField = value;
                    this.RaisePropertyChanged("userId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userPassword {
            get {
                return this.userPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.userPasswordField, value) != true)) {
                    this.userPasswordField = value;
                    this.RaisePropertyChanged("userPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Document", Namespace="http://schemas.datacontract.org/2004/07/AuthNDecryptService")]
    [System.SerializableAttribute()]
    public partial class Document : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string decryptKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fileContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string filenameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string decryptKey {
            get {
                return this.decryptKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.decryptKeyField, value) != true)) {
                    this.decryptKeyField = value;
                    this.RaisePropertyChanged("decryptKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fileContent {
            get {
                return this.fileContentField;
            }
            set {
                if ((object.ReferenceEquals(this.fileContentField, value) != true)) {
                    this.fileContentField = value;
                    this.RaisePropertyChanged("fileContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string filename {
            get {
                return this.filenameField;
            }
            set {
                if ((object.ReferenceEquals(this.filenameField, value) != true)) {
                    this.filenameField = value;
                    this.RaisePropertyChanged("filename");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthNDecryptService.IAuthNDecrypt")]
    public interface IAuthNDecrypt {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthNDecrypt/Authenticate", ReplyAction="http://tempuri.org/IAuthNDecrypt/AuthenticateResponse")]
        Decrypt.AuthNDecryptService.User Authenticate(Decrypt.AuthNDecryptService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthNDecrypt/Authenticate", ReplyAction="http://tempuri.org/IAuthNDecrypt/AuthenticateResponse")]
        System.Threading.Tasks.Task<Decrypt.AuthNDecryptService.User> AuthenticateAsync(Decrypt.AuthNDecryptService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthNDecrypt/GetUser", ReplyAction="http://tempuri.org/IAuthNDecrypt/GetUserResponse")]
        Decrypt.AuthNDecryptService.User GetUser(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthNDecrypt/GetUser", ReplyAction="http://tempuri.org/IAuthNDecrypt/GetUserResponse")]
        System.Threading.Tasks.Task<Decrypt.AuthNDecryptService.User> GetUserAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthNDecrypt/SendDocument", ReplyAction="http://tempuri.org/IAuthNDecrypt/SendDocumentResponse")]
        bool SendDocument(Decrypt.AuthNDecryptService.Document document, string decryptedContent, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthNDecrypt/SendDocument", ReplyAction="http://tempuri.org/IAuthNDecrypt/SendDocumentResponse")]
        System.Threading.Tasks.Task<bool> SendDocumentAsync(Decrypt.AuthNDecryptService.Document document, string decryptedContent, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthNDecrypt/UploadDocument", ReplyAction="http://tempuri.org/IAuthNDecrypt/UploadDocumentResponse")]
        string UploadDocument(string filename, string fileContent, Decrypt.AuthNDecryptService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthNDecrypt/UploadDocument", ReplyAction="http://tempuri.org/IAuthNDecrypt/UploadDocumentResponse")]
        System.Threading.Tasks.Task<string> UploadDocumentAsync(string filename, string fileContent, Decrypt.AuthNDecryptService.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthNDecryptChannel : Decrypt.AuthNDecryptService.IAuthNDecrypt, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthNDecryptClient : System.ServiceModel.ClientBase<Decrypt.AuthNDecryptService.IAuthNDecrypt>, Decrypt.AuthNDecryptService.IAuthNDecrypt {
        
        public AuthNDecryptClient() {
        }
        
        public AuthNDecryptClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthNDecryptClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthNDecryptClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthNDecryptClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Decrypt.AuthNDecryptService.User Authenticate(Decrypt.AuthNDecryptService.User user) {
            return base.Channel.Authenticate(user);
        }
        
        public System.Threading.Tasks.Task<Decrypt.AuthNDecryptService.User> AuthenticateAsync(Decrypt.AuthNDecryptService.User user) {
            return base.Channel.AuthenticateAsync(user);
        }
        
        public Decrypt.AuthNDecryptService.User GetUser(int loginId) {
            return base.Channel.GetUser(loginId);
        }
        
        public System.Threading.Tasks.Task<Decrypt.AuthNDecryptService.User> GetUserAsync(int loginId) {
            return base.Channel.GetUserAsync(loginId);
        }
        
        public bool SendDocument(Decrypt.AuthNDecryptService.Document document, string decryptedContent, string key) {
            return base.Channel.SendDocument(document, decryptedContent, key);
        }
        
        public System.Threading.Tasks.Task<bool> SendDocumentAsync(Decrypt.AuthNDecryptService.Document document, string decryptedContent, string key) {
            return base.Channel.SendDocumentAsync(document, decryptedContent, key);
        }
        
        public string UploadDocument(string filename, string fileContent, Decrypt.AuthNDecryptService.User user) {
            return base.Channel.UploadDocument(filename, fileContent, user);
        }
        
        public System.Threading.Tasks.Task<string> UploadDocumentAsync(string filename, string fileContent, Decrypt.AuthNDecryptService.User user) {
            return base.Channel.UploadDocumentAsync(filename, fileContent, user);
        }
    }
}
